{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikolas/Documents/React/Proyecto Final/suci/src/components/layout/mozo/MenuItems.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid, Typography, Box, Paper } from \"@material-ui/core/\";\nimport Button from \"@material-ui/core/Button\";\nimport { connect } from \"react-redux\";\nimport { addItem } from \"../../../redux/actions/orderAction\"; // consulta a la  API Graphql\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ADD_ITEM } from \"../../../services/Mutations\";\nimport { useParams } from \"react-router-dom\"; // ----- Componente encargado de mostrar los items ----- //\n\nconst MenuItems = ({\n  dishes,\n  add\n}) => {\n  _s();\n\n  const {\n    order_id_param\n  } = useParams();\n  const order_id = order_id_param; // instaciamos la mutación que vamos a utilizar\n\n  const [addDishToOrder] = useMutation(ADD_ITEM); // Funciones\n\n  const addDish = async item_id => {\n    await addDishToOrder({\n      variables: {\n        order_id: order_id,\n        dish_id: item_id\n      }\n    }).then(result => {\n      let {\n        dishes\n      } = result.data.addDishToOrder;\n      let loadedItem = dishes[dishes.length - 1];\n      add({ ...loadedItem,\n        order_id\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    style: {\n      height: 400,\n      overflow: \"auto\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      md: 12,\n      children: dishes.map(item => /*#__PURE__*/_jsxDEV(Box, {\n        m: 3,\n        border: 0,\n        borderRadius: 10,\n        boxShadow: 3,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"row\",\n          justify: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            style: {\n              width: \"30%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            style: {\n              width: 50\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              children: item.price\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"text\",\n              color: \"primary\",\n              onClick: () => addDish(item._id),\n              children: \"Agregar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)]\n        }, item._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MenuItems, \"ZR4AoCItGXaVM9ZOxkIl/lpMcqQ=\", false, function () {\n  return [useParams, useMutation];\n});\n\n_c = MenuItems;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    add: item => dispatch(addItem(item))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(MenuItems);\n\nvar _c;\n\n$RefreshReg$(_c, \"MenuItems\");","map":{"version":3,"sources":["/Users/nikolas/Documents/React/Proyecto Final/suci/src/components/layout/mozo/MenuItems.js"],"names":["React","Grid","Typography","Box","Paper","Button","connect","addItem","useMutation","ADD_ITEM","useParams","MenuItems","dishes","add","order_id_param","order_id","addDishToOrder","addDish","item_id","variables","dish_id","then","result","data","loadedItem","length","catch","error","console","log","height","overflow","map","item","width","name","price","_id","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Grid, Typography, Box, Paper } from \"@material-ui/core/\";\nimport Button from \"@material-ui/core/Button\";\nimport { connect } from \"react-redux\";\nimport { addItem } from \"../../../redux/actions/orderAction\";\n// consulta a la  API Graphql\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ADD_ITEM } from \"../../../services/Mutations\";\nimport { useParams } from \"react-router-dom\";\n\n// ----- Componente encargado de mostrar los items ----- //\nconst MenuItems = ({ dishes, add }) => {\n  const { order_id_param } = useParams();\n  const order_id = order_id_param;\n  // instaciamos la mutación que vamos a utilizar\n  const [addDishToOrder] = useMutation(ADD_ITEM);\n\n  // Funciones\n  const addDish = async (item_id) => {\n    await addDishToOrder({\n      variables: {\n        order_id: order_id,\n        dish_id: item_id,\n      },\n    })\n      .then((result) => {\n        let { dishes } = result.data.addDishToOrder;\n        let loadedItem = dishes[dishes.length - 1];\n        add({ ...loadedItem, order_id });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <Paper style={{ height: 400, overflow: \"auto\" }}>\n      <Grid item md={12}>\n        {dishes.map((item) => (\n          <Box m={3} border={0} borderRadius={10} boxShadow={3}>\n            <Grid\n              container\n              key={item._id}\n              direction=\"row\"\n              justify=\"space-between\"\n            >\n              <Box style={{ width: \"30%\" }}>\n                <Typography>{item.name}</Typography>\n              </Box>\n              <Box style={{ width: 50 }}>\n                <Typography>{item.price}</Typography>\n              </Box>\n              <Box>\n                <Button\n                  variant=\"text\"\n                  color=\"primary\"\n                  onClick={() => addDish(item._id)}\n                >\n                  Agregar\n                </Button>\n              </Box>\n            </Grid>\n          </Box>\n        ))}\n      </Grid>\n    </Paper>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    add: (item) => dispatch(addItem(item)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(MenuItems);\n"]},"metadata":{},"sourceType":"module"}