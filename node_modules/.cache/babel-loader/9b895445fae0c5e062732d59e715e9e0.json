{"ast":null,"code":"import { FETCH_ORDERS, ADD_ORDER, CLOSE_ORDER, REMOVE_ORDER, PAY_ORDER, ADD_ITEM, REMOVE_ITEM, INCREMENT_ITEM, DECREMENT_ITEM, DISHES_PREPARING_ORDER, DISHES_READY_ORDER, DISH_DELIVERED, DISH_READY, DISH_PREPARING } from \"../actions/orderAction\"; // Estado inicial\n\nconst initialState = {\n  orders: []\n};\nexport function order(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_ORDERS:\n      return {\n        orders: action.payload\n      };\n\n    case ADD_ORDER:\n      return {\n        orders: [action.payload, ...state.orders]\n      };\n\n    case CLOSE_ORDER:\n      return {\n        orders: [...state.orders.map(order => {\n          if (order._id === action.payload) {\n            order.closed = !order.closed;\n          }\n\n          return order;\n        })]\n      };\n\n    case REMOVE_ORDER:\n      return {\n        orders: [...state.orders.filter(order => order._id !== action.payload)]\n      };\n\n    case PAY_ORDER:\n      return {\n        orders: [...state.orders.map(order => {\n          if (order._id === action.payload) {\n            order.paid = !order.paid;\n          }\n\n          return order;\n        })]\n      };\n\n    case ADD_ITEM:\n      return {\n        orders: [...state.orders.map(order => {\n          if (order._id === action.payload.order_id) {\n            delete action.payload.order_id;\n            if (order.dishes === undefined) order.dishes = [];\n            order.dishes = [action.payload, ...order.dishes];\n          }\n\n          return order;\n        })]\n      };\n\n    case REMOVE_ITEM:\n      return {\n        orders: [...state.orders.map(order => {\n          if (order._id === action.payload.order_id) {\n            order.dishes = order.dishes.filter(dish => dish._id !== action.payload._id);\n          }\n\n          return order;\n        })]\n      };\n\n    case INCREMENT_ITEM:\n      return {\n        orders: [...state.orders.map(order => {\n          if (order._id === action.payload.order_id) {\n            order.dishes.forEach(item => {\n              if (item._id === action.payload._id) {\n                item.count += 1;\n              }\n            });\n          }\n\n          return order;\n        })]\n      };\n\n    case DECREMENT_ITEM:\n      return {\n        orders: [...state.orders.map(order => {\n          if (order._id === action.payload.order_id) {\n            order.dishes.forEach(item => {\n              if (item._id === action.payload._id) {\n                item.count -= 1;\n              }\n            });\n          }\n\n          return order;\n        })]\n      };\n\n    case DISHES_READY_ORDER:\n      console.log(action.payload.dishes);\n      return {\n        orders: [...state.orders.map(order => {\n          if (order._id === action.payload.order_id) {\n            action.payload.dishes.forEach(ele => {\n              order.dishes.forEach(item => {\n                if (item._id === ele) {\n                  item.state = \"ready\";\n                }\n              });\n            });\n          }\n\n          return order;\n        })]\n      };\n\n    case DISHES_PREPARING_ORDER:\n      return {\n        orders: [...state.orders.map(order => {\n          if (order._id === action.payload.order_id) {\n            action.payload.dishes.forEach(ele => {\n              order.dishes.forEach(item => {\n                if (item._id === ele) {\n                  item.state = \"preparing\";\n                }\n              });\n            });\n          }\n\n          return order;\n        })]\n      };\n\n    case DISH_DELIVERED:\n      return {\n        orders: [...state.orders.map(order => {\n          if (order._id === action.payload.order_id) {\n            order.dishes.forEach(item => {\n              if (item._id === action.payload.dish_id) {\n                item.state = \"delivered\";\n              }\n            });\n          }\n\n          return order;\n        })]\n      };\n\n    case DISH_READY:\n      return {\n        orders: [...state.orders.map(order => {\n          if (order._id === action.payload.order_id) {\n            order.dishes.forEach(item => {\n              if (item._id === action.payload.dish_id) {\n                item.state = \"ready\";\n              }\n            });\n          }\n\n          return order;\n        })]\n      };\n\n    case DISH_PREPARING:\n      return {\n        orders: [...state.orders.map(order => {\n          if (order._id === action.payload.order_id) {\n            order.dishes.forEach(item => {\n              if (item._id === action.payload.dish_id) {\n                item.state = \"preparing\";\n              }\n            });\n          }\n\n          return order;\n        })]\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/nikolas/Documents/React/Proyecto Final/suci/src/redux/reducers/orderReducer.js"],"names":["FETCH_ORDERS","ADD_ORDER","CLOSE_ORDER","REMOVE_ORDER","PAY_ORDER","ADD_ITEM","REMOVE_ITEM","INCREMENT_ITEM","DECREMENT_ITEM","DISHES_PREPARING_ORDER","DISHES_READY_ORDER","DISH_DELIVERED","DISH_READY","DISH_PREPARING","initialState","orders","order","state","action","type","payload","map","_id","closed","filter","paid","order_id","dishes","undefined","dish","forEach","item","count","console","log","ele","dish_id"],"mappings":"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","sourcesContent":["import {\n  FETCH_ORDERS,\n  ADD_ORDER,\n  CLOSE_ORDER,\n  REMOVE_ORDER,\n  PAY_ORDER,\n  ADD_ITEM,\n  REMOVE_ITEM,\n  INCREMENT_ITEM,\n  DECREMENT_ITEM,\n  DISHES_PREPARING_ORDER,\n  DISHES_READY_ORDER,\n  DISH_DELIVERED,\n  DISH_READY,\n  DISH_PREPARING,\n} from \"../actions/orderAction\";\n\n// Estado inicial\nconst initialState = { orders: [] };\n\nexport function order(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_ORDERS:\n      return {\n        orders: action.payload,\n      };\n\n    case ADD_ORDER:\n      return {\n        orders: [action.payload, ...state.orders],\n      };\n\n    case CLOSE_ORDER:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload) {\n              order.closed = !order.closed;\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case REMOVE_ORDER:\n      return {\n        orders: [\n          ...state.orders.filter((order) => order._id !== action.payload),\n        ],\n      };\n\n    case PAY_ORDER:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload) {\n              order.paid = !order.paid;\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case ADD_ITEM:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              delete action.payload.order_id;\n              if (order.dishes === undefined) order.dishes = [];\n              order.dishes = [action.payload, ...order.dishes];\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case REMOVE_ITEM:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes = order.dishes.filter(\n                (dish) => dish._id !== action.payload._id\n              );\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case INCREMENT_ITEM:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes.forEach((item) => {\n                if (item._id === action.payload._id) {\n                  item.count += 1;\n                }\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DECREMENT_ITEM:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes.forEach((item) => {\n                if (item._id === action.payload._id) {\n                  item.count -= 1;\n                }\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DISHES_READY_ORDER:\n      console.log(action.payload.dishes);\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              action.payload.dishes.forEach((ele) => {\n                order.dishes.forEach((item) => {\n                  if (item._id === ele) {\n                    item.state = \"ready\";\n                  }\n                });\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DISHES_PREPARING_ORDER:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              action.payload.dishes.forEach((ele) => {\n                order.dishes.forEach((item) => {\n                  if (item._id === ele) {\n                    item.state = \"preparing\";\n                  }\n                });\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DISH_DELIVERED:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes.forEach((item) => {\n                if (item._id === action.payload.dish_id) {\n                  item.state = \"delivered\";\n                }\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DISH_READY:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes.forEach((item) => {\n                if (item._id === action.payload.dish_id) {\n                  item.state = \"ready\";\n                }\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DISH_PREPARING:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes.forEach((item) => {\n                if (item._id === action.payload.dish_id) {\n                  item.state = \"preparing\";\n                }\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}