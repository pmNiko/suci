{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikolas/Documents/React/Proyecto Final/suci/src/components/layout/kitchen/contentCard.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid, Typography, Checkbox, Box, Button } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { changeDishReady, changeDishPreaping } from \"../../../redux/actions/orderAction\"; // consulta a la  API Graphql\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { DISH_READY, DISH_PREPARING } from \"../../../services/Mutations\";\nexport const ContentCard = ({\n  order,\n  changeDishReady,\n  changeDishPreaping\n}) => {\n  _s();\n\n  let dishes = order[0].dishes.filter(dish => dish.state !== \"pending\");\n  let order_id = order[0]._id; // Gestiona el cierre de la comanda\n\n  const [dishReady] = useMutation(DISH_READY);\n  const [dishPreaping] = useMutation(DISH_PREPARING);\n\n  const handleChange = async (dish_id, state) => {\n    if (state === \"preparing\") {\n      changeDishReady({\n        order_id,\n        dish_id\n      });\n      await dishReady({\n        variables: {\n          order_id: order_id,\n          dish_id: dish_id\n        }\n      }).then(result => {// let { order } = result.data.dishReady;\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      changeDishPreaping({\n        order_id,\n        dish_id\n      });\n      await dishPreaping({\n        variables: {\n          order_id: order_id,\n          dish_id: dish_id\n        }\n      }).then(result => {// let { order } = result.data.payOrder\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    alignItems: \"center\",\n    children: dishes.map(({\n      _id,\n      name,\n      state,\n      count\n    }, index) => /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        alignItems: \"center\",\n        justify: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          style: {\n            width: 200\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            style: {\n              textDecorationLine: state === \"delivered\" ? \"line-through\" : \"none\"\n            },\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          style: {\n            width: 50\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            style: {\n              textDecorationLine: state === \"delivered\" ? \"line-through\" : \"none\"\n            },\n            children: count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          style: {\n            width: 50\n          },\n          children: (state === \"preparing\" || state === \"ready\") && /*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: state !== \"pending\" && state !== \"preparing\",\n            onChange: () => {\n              handleChange(_id, state);\n            },\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContentCard, \"7Y45EgJ9bM/oG0UZ2QagqhVpj4I=\", false, function () {\n  return [useMutation, useMutation];\n});\n\n_c = ContentCard;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeDishReady: payload => dispatch(changeDishReady(payload)),\n    changeDishPreaping: payload => dispatch(changeDishPreaping(payload))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ContentCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"ContentCard\");","map":{"version":3,"sources":["/Users/nikolas/Documents/React/Proyecto Final/suci/src/components/layout/kitchen/contentCard.js"],"names":["React","Grid","Typography","Checkbox","Box","Button","connect","changeDishReady","changeDishPreaping","useMutation","DISH_READY","DISH_PREPARING","ContentCard","order","dishes","filter","dish","state","order_id","_id","dishReady","dishPreaping","handleChange","dish_id","variables","then","result","catch","error","console","log","map","name","count","index","width","textDecorationLine","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Grid, Typography, Checkbox, Box, Button } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport {\n  changeDishReady,\n  changeDishPreaping,\n} from \"../../../redux/actions/orderAction\";\n// consulta a la  API Graphql\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { DISH_READY, DISH_PREPARING } from \"../../../services/Mutations\";\n\nexport const ContentCard = ({ order, changeDishReady, changeDishPreaping }) => {\n  let dishes = order[0].dishes.filter((dish) => dish.state !== \"pending\");\n  let order_id = order[0]._id;\n\n  // Gestiona el cierre de la comanda\n  const [dishReady] = useMutation(DISH_READY);\n  const [dishPreaping] = useMutation(DISH_PREPARING);\n  const handleChange = async (dish_id, state) => {\n    if (state === \"preparing\") {\n      changeDishReady({ order_id, dish_id });\n      await dishReady({\n        variables: {\n          order_id: order_id,\n          dish_id: dish_id,\n        },\n      })\n        .then((result) => {\n          // let { order } = result.data.dishReady;\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    } else {\n      changeDishPreaping({ order_id, dish_id });\n      await dishPreaping({\n        variables: {\n          order_id: order_id,\n          dish_id: dish_id,\n        },\n      })\n        .then((result) => {\n          // let { order } = result.data.payOrder\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\">\n      {dishes.map(({ _id, name, state, count }, index) => (\n        <Grid item>\n          <Grid\n            container\n            key={index}\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"space-between\"\n          >\n            <Box style={{ width: 200 }}>\n              <Typography\n                style={{\n                  textDecorationLine:\n                    state === \"delivered\" ? \"line-through\" : \"none\",\n                }}\n              >\n                {name}\n              </Typography>\n            </Box>\n            <Box style={{ width: 50 }}>\n              <Typography\n                style={{\n                  textDecorationLine:\n                    state === \"delivered\" ? \"line-through\" : \"none\",\n                }}\n              >\n                {count}\n              </Typography>\n            </Box>\n            <Box style={{ width: 50 }}>\n              {(state === \"preparing\" || state === \"ready\") && (\n                <Checkbox\n                  checked={state !== \"pending\" && state !== \"preparing\"}\n                  onChange={() => {\n                    handleChange(_id, state);\n                  }}\n                  color=\"primary\"\n                />\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    changeDishReady: (payload) => dispatch(changeDishReady(payload)),\n    changeDishPreaping: (payload) => dispatch(changeDishPreaping(payload)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ContentCard);\n"]},"metadata":{},"sourceType":"module"}