{"version":3,"sources":["services/Mutations.js","components/layout/till/Detail.js","components/layout/till/Tickets.js","components/layout/till/Till.js"],"names":["CREATE_ORDER","gql","ADD_ITEM","REMOVE_ITEM","INCREMENT_ITEM","DECREMENT_ITEM","REMOVE_ORDER","CLOSE_ORDER","PAY_ORDER","DISHES_PREPARING","DISH_DELIVERED","DISH_READY","DISH_PREPARING","useStyles","makeStyles","table","minWidth","ccyFormat","num","toFixed","priceRow","qty","unit","connect","dispatch","pay","item","order","classes","invoiceSubtotal","items","subtotal","map","price","count","dishes","invoiceTaxes","invoiceTotal","useMutation","payOrder","checkIn","a","_id","variables","order_id","then","result","catch","error","console","log","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","colSpan","number","date","time","TableBody","name","rowSpan","Button","variant","size","color","button","disabled","paid","onClick","startIcon","fullWidth","root","width","container","maxHeight","Tickets","orders","setDetail","useState","page","setPage","rowsPerPage","setRowsPerPage","stickyHeader","slice","index","hover","role","tabIndex","closed","TablePagination","rowsPerPageOptions","length","onChangePage","event","newPage","onChangeRowsPerPage","target","value","state","detail","orders_closed","filter","undefined","Grid","md","Box","m","marginTop"],"mappings":"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","file":"static/js/10.89bda706.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\n\n/*\n  Mutation para crear una comanda\n*/\nexport const CREATE_ORDER = gql`\n  # definición de la mutación\n  mutation CreateOrder($table: Int!) {\n    # ejecución de la mutación\n    createOrder(table: $table) {\n      _id\n      number\n      date\n      time\n      table\n      closed\n    }\n  }\n`;\n\n/*\n  Mutation para agregar un item a una comanda\n*/\nexport const ADD_ITEM = gql`\n  # definición de la mutación\n  mutation AddDishToOrder($order_id: ID!, $dish_id: ID!) {\n    # ejecución de la mutación\n    addDishToOrder(order_id: $order_id, dish_id: $dish_id) {\n      dishes {\n        _id\n        name\n        price\n        category\n        count\n        state\n      }\n    }\n  }\n`;\n\n/*\n  Mutation para eliminar un item a una comanda\n*/\nexport const REMOVE_ITEM = gql`\n  # definición de la mutación\n  mutation PopDishToOrder($order_id: ID!, $dish_id: ID!) {\n    # ejecución de la mutación\n    popDishToOrder(order_id: $order_id, dish_id: $dish_id) {\n      dishes {\n        _id\n      }\n    }\n  }\n`;\n\n/*\n  Mutation para incrementar la cantidad de un item a una comanda\n*/\nexport const INCREMENT_ITEM = gql`\n  # definición de la mutación\n  mutation IncrementDishToOrder($order_id: ID!, $dish_id: ID!) {\n    # ejecución de la mutación\n    incrementDishToOrder(order_id: $order_id, dish_id: $dish_id) {\n      dishes {\n        _id\n        count\n      }\n    }\n  }\n`;\n\n/*\n  Mutation para decrementar la cantidad de un item a una comanda\n*/\nexport const DECREMENT_ITEM = gql`\n  # definición de la mutación\n  mutation IncrementDishToOrder($order_id: ID!, $dish_id: ID!) {\n    # ejecución de la mutación\n    decrementDishToOrder(order_id: $order_id, dish_id: $dish_id) {\n      dishes {\n        _id\n        count\n      }\n    }\n  }\n`;\n\n/*\n  Mutation para eliminar una comanda\n*/\nexport const REMOVE_ORDER = gql`\n  # definición de la mutación\n  mutation DeleteOrder($order_id: ID!) {\n    # ejecución de la mutación\n    deleteOrder(order_id: $order_id) {\n      _id\n      table\n    }\n  }\n`;\n\n/*\n  Mutation para cerrar una comanda\n*/\nexport const CLOSE_ORDER = gql`\n  # definición de la mutación\n  mutation CloseOrder($order_id: ID!) {\n    # ejecución de la mutación\n    closeOrder(order_id: $order_id) {\n      _id\n      table\n    }\n  }\n`;\n\n/*\n  Mutation para pagar una comanda\n*/\nexport const PAY_ORDER = gql`\n  # definición de la mutación\n  mutation PayOrder($order_id: ID!) {\n    # ejecución de la mutación\n    payOrder(order_id: $order_id) {\n      _id\n      paid\n    }\n  }\n`;\n\n/*\n  Mutation para enviar a cocina los items pendientes de una comanda\n*/\nexport const DISHES_PREPARING = gql`\n  # definición de la mutación\n  mutation DishPreparingToOrder($order_id: ID!, $dishes: [ID]) {\n    # ejecución de la mutación\n    dishPreparingToOrder(order_id: $order_id, dishes: $dishes) {\n      dishes {\n        _id\n      }\n    }\n  }\n`;\n\n/*\n  Mutation para cambiar el estado de los platos que estan listos\n*/\nexport const DISHES_READY = gql`\n  # definición de la mutación\n  mutation DishReadyToOrder($order_id: ID!, $dishes: [ID]) {\n    # ejecución de la mutación\n    dishReadyToOrder(order_id: $order_id, dishes: $dishes) {\n      dishes {\n        _id\n      }\n    }\n  }\n`;\n\n/*\n  Mutation para cambiar el estado de un item entregado\n*/\nexport const DISH_DELIVERED = gql`\n  # definición de la mutación\n  mutation DishDelivered($order_id: ID!, $dish_id: ID!) {\n    # ejecución de la mutación\n    dishDelivered(order_id: $order_id, dish_id: $dish_id) {\n      dishes {\n        _id\n        count\n      }\n    }\n  }\n`;\n\n/*\n  Mutation para cambiar el estado de un item listo\n*/\nexport const DISH_READY = gql`\n  # definición de la mutación\n  mutation DishReady($order_id: ID!, $dish_id: ID!) {\n    # ejecución de la mutación\n    dishReady(order_id: $order_id, dish_id: $dish_id) {\n      _id\n      dishes {\n        _id\n        state\n      }\n    }\n  }\n`;\n\n/*\n  Mutation para cambiar el estado de un item en preparación\n*/\nexport const DISH_PREPARING = gql`\n  # definición de la mutación\n  mutation DishPreparing($order_id: ID!, $dish_id: ID!) {\n    # ejecución de la mutación\n    dishPreparing(order_id: $order_id, dish_id: $dish_id) {\n      dishes {\n        _id\n        count\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Table, Button } from \"@material-ui/core/\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport PaymentIcon from \"@material-ui/icons/Payment\";\nimport { connect } from \"react-redux\";\nimport { pay } from \"../../../redux/actions/orderAction\";\n// consulta a la  API Graphql\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { PAY_ORDER } from \"../../../services/Mutations\";\n\nconst TAX_RATE = 0.07;\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n});\n\nfunction ccyFormat(num) {\n  return `${num.toFixed(2)}`;\n}\n\nfunction priceRow(qty, unit) {\n  return qty * unit;\n}\n\nfunction subtotal(items) {\n  let subtotal = 0;\n  items.map((item) => {\n    subtotal += priceRow(item.price, item.count);\n  });\n  return subtotal;\n}\n\nconst Detail = ({ order, pay }) => {\n  const classes = useStyles();\n  const invoiceSubtotal = subtotal(order.dishes);\n  const invoiceTaxes = TAX_RATE * invoiceSubtotal;\n  const invoiceTotal = invoiceSubtotal - invoiceTaxes;\n\n  // Gestiona el cierre de la comanda\n  const [payOrder] = useMutation(PAY_ORDER);\n  const checkIn = async () => {\n    pay(order._id);\n    await payOrder({\n      variables: {\n        order_id: order._id,\n      },\n    })\n      .then((result) => {\n        // let { order } = result.data.payOrder\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"spanning table\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={5}>\n              FACTURA\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">{order.number}</TableCell>\n            <TableCell align=\"center\">Mesa Nº {order.table}</TableCell>\n            <TableCell align=\"right\">Fecha: {order.date}</TableCell>\n            <TableCell align=\"right\">Hora: {order.time}</TableCell>\n            <TableCell align=\"right\" colSpan={3}>\n              Precio\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Item</TableCell>\n            <TableCell align=\"center\">Cantidad</TableCell>\n            <TableCell align=\"right\">Precio Unitario</TableCell>\n            <TableCell align=\"right\">Sum</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {order.dishes.map(({ _id, name, count, price }) => (\n            <TableRow key={_id}>\n              <TableCell>{name}</TableCell>\n              <TableCell align=\"center\">{count}</TableCell>\n              <TableCell align=\"right\">{ccyFormat(price)}</TableCell>\n              <TableCell align=\"right\">\n                {ccyFormat(priceRow(price, count))}\n              </TableCell>\n            </TableRow>\n          ))}\n\n          <TableRow>\n            <TableCell rowSpan={3} />\n            <TableCell colSpan={2}>Subtotal</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceSubtotal)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Descuento</TableCell>\n            <TableCell align=\"right\">{`${(TAX_RATE * 100).toFixed(\n              0\n            )} %`}</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceTaxes)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell colSpan={3}>Total</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceTotal)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell colSpan={5}>\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                color=\"secondary\"\n                className={classes.button}\n                disabled={order.paid}\n                onClick={() => {\n                  checkIn();\n                }}\n                startIcon={<PaymentIcon />}\n                fullWidth\n              >\n                COBRAR FACTURA\n              </Button>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    pay: (item) => dispatch(pay(item)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Detail);\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Detail from \"./Detail\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n  container: {\n    maxHeight: 500,\n  },\n});\n\nconst Tickets = ({ orders, setDetail }) => {\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const detailFilter = (order_id) => {\n    setDetail(order_id);\n  };\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Nº</TableCell>\n              <TableCell align=\"center\">Comanda</TableCell>\n              <TableCell align=\"center\">Mesa</TableCell>\n              <TableCell align=\"center\">Estado</TableCell>\n              <TableCell align=\"center\">Pagada</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {orders\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((order, index) => (\n                <TableRow\n                  hover\n                  role=\"checkbox\"\n                  tabIndex={-1}\n                  key={index}\n                  onClick={() => {\n                    detailFilter(order._id);\n                  }}\n                >\n                  <TableCell key={order._id} align=\"center\">\n                    {index}\n                  </TableCell>\n                  <TableCell key={order._id} align=\"center\">\n                    {order.number}\n                  </TableCell>\n                  <TableCell key={order._id} align=\"center\">\n                    {order.table}\n                  </TableCell>\n                  <TableCell key={order._id} align=\"center\">\n                    {order.closed ? \"Cerrada\" : \"Abierta\"}\n                  </TableCell>\n                  <TableCell key={order._id} align=\"center\">\n                    {order.paid ? \"Si\" : \"No\"}\n                  </TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={orders.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n};\n\nexport default Tickets;\n","import React, { useState } from \"react\";\nimport { Grid, Box } from \"@material-ui/core/\";\nimport Tickets from \"./Tickets\";\nimport Detail from \"./Detail\";\nimport { connect } from \"react-redux\";\n\nconst Till = ({ orders }) => {\n  const [detail, setDetail] = useState(\"\");\n  let orders_closed = orders.filter((order) => order.closed);\n  let order = orders[0];\n  if (detail !== undefined && detail !== \"\") {\n    order = orders.filter((order) => order._id === detail)[0];\n  }\n  return (\n    <>\n      <Grid container>\n        <Grid item md={5}>\n          <Box m={3} marginTop={8}>\n            <Tickets orders={orders_closed} setDetail={setDetail} />\n          </Box>\n        </Grid>\n        <Grid item md={7}>\n          <Box m={3} marginTop={8}>\n            <Detail order={order} />\n          </Box>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    orders: state.order.orders,\n  };\n};\n\nexport default connect(mapStateToProps)(Till);\n"],"sourceRoot":""}