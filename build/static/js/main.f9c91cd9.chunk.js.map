{"version":3,"sources":["styles/themeConfig.js","images/suci_logo.png","utils/links.js","components/common/navbar.js","App.js","redux/reducers/orderReducer.js","redux/reducers/tableReducers.js","redux/reducers/index.js","redux/store.js","index.js","redux/actions/orderAction.js","redux/actions/tableAction.js","services/Queries.js"],"names":["theme","createMuiTheme","palette","primary","light","red","main","dark","contrastText","secondary","indigo","success","green","links","id","path","title","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","spacing","Navbar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Avatar","alt","src","Logo","Typography","variant","map","style","textDecoration","marginLeft","to","exact","activeStyle","Button","IndexMozo","lazy","Kitchen","Till","Floor","connect","dispatch","fetchOrders","payload","useQuery","GET_ORDERS","loading","error","data","useEffect","orders","length","console","log","ThemeProvider","fallback","component","initialState","tables","combineReducers","order","state","action","type","FETCH_ORDERS","ADD_ORDER","CLOSE_ORDER","_id","closed","REMOVE_ORDER","filter","PAY_ORDER","paid","ADD_ITEM","order_id","undefined","dishes","REMOVE_ITEM","dish","INCREMENT_ITEM","forEach","item","count","DECREMENT_ITEM","DISHES_READY_ORDER","ele","DISHES_PREPARING_ORDER","DISH_DELIVERED","dish_id","DISH_READY","DISH_PREPARING","table","FETCH_TABLES","MODIFY_TABLE","number","free","order_id_param","RESET_TABLE","store","createStore","rootReducers","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById","addOrder","billOrder","removeOrder","addItem","removeItem","incrementItem","decrementItem","dishesPreparingToOrder","changeDishDelivered","changeDishReady","changeDishPreaping","pay","fetchTables","modifyTable","resetTable","GET_DISHES","gql","GET_TABLES"],"mappings":"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","file":"static/js/main.f9c91cd9.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\nimport { red, indigo, green } from \"@material-ui/core/colors/\";\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: red[300],\n      main: red[700],\n      dark: red[800],\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      light: indigo[300],\n      main: indigo[500],\n      dark: indigo[800],\n      contrastText: \"#fff\",\n    },\n    success: {\n      light: green[300],\n      main: green[500],\n      dark: green[800],\n      contrastText: \"#fff\",\n    },\n  },\n});\n","export default __webpack_public_path__ + \"static/media/suci_logo.101da3ff.png\";","export const links = [\n  {\n    id: 1,\n    path: \"/floor\",\n    title: \"Salon\",\n  },\n  {\n    id: 2,\n    path: \"/kitchen\",\n    title: \"Cocina\",\n  },\n  {\n    id: 3,\n    path: \"/till\",\n    title: \"Caja\",\n  },\n];\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Logo from \"./../../images/suci_logo.png\";\nimport { links } from \"../../utils/links\";\nimport { NavLink } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport const Navbar = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <Avatar alt=\"Suci\" src={Logo} />\n          </IconButton>\n\n          <Typography variant=\"h6\" className={classes.title}>\n            SUCI\n          </Typography>\n\n          {links.map(({ id, path, title }) => (\n            <NavLink\n              key={id}\n              style={{\n                color: \"black\",\n                textDecoration: \"none\",\n                marginLeft: \"20px\",\n              }}\n              to={path}\n              exact\n              activeStyle={{ color: \"white\" }}\n            >\n              {title}\n            </NavLink>\n          ))}\n\n          <Button color=\"inherit\" style={{ marginLeft: \"50px\" }}>\n            {\"\"}\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import { ThemeProvider } from \"@material-ui/core/styles\";\nimport { theme } from \"./styles/themeConfig\";\nimport { Navbar } from \"./components/common/navbar\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n// consulta a la  API Graphql\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_ORDERS } from \"./services/Queries\";\nimport { connect } from \"react-redux\";\nimport { fetchOrders } from \"./redux/actions/orderAction\";\n\n// lazy es una función y Suspense es un componente\nimport React, { lazy, Suspense, useEffect } from \"react\";\n/*  React carga los componentes de manera sincronica, \n    lazy load hace que los componentes se carguen de manera\n    diferida a medida que los vayamos requiriendo. Lazy busca \n    el componente y Suspense lo inyecta al DOM */\nconst IndexMozo = lazy(() => import(\"./components/layout/mozo/IndexMozo\"));\nconst Kitchen = lazy(() => import(\"./components/pages/kitchen\"));\nconst Till = lazy(() => import(\"./components/layout/till/Till\"));\nconst Floor = lazy(() => import(\"./components/pages/floor\"));\n\nfunction App({ fetchOrders }) {\n  // consulta a partir del hook de apollo\n  const { loading, error, data } = useQuery(GET_ORDERS);\n\n  useEffect(() => {\n    if (data) {\n      if (data.orders.length > 0) {\n        // let orders = data.orders.filter((order) => order.closed === false);\n        // console.log(orders[0].number, orders[0].dishes[0].state);\n        fetchOrders(data.orders);\n      }\n    }\n    console.log(\"Data orders: \", data);\n    console.log(\"loading orders: \", loading);\n    console.log(\"error orders: \", error);\n  }, [loading]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      {/* El BrowserRouter es quien maneja el routing y este va en el \n        nivel mas alto de la app */}\n      <Router>\n        <Navbar />\n        {/* Inyecta el componente en el dom */}\n        <Suspense fallback={\"Cargando...\"}>\n          {/* El Switch sirve para renderizar la primer coincidencia */}\n          <Switch>\n            {/* Route se encarga de sentenciar las rutas con las cuales\n            renderear los componentes y la variante exact matchea la ruta exacta*/}\n            <Route path=\"/\" exact component={Floor} />\n            <Route path=\"/mozo/:order_id_param\" exact component={IndexMozo} />\n            <Route path=\"/kitchen\" exact component={Kitchen} />\n            <Route path=\"/till\" exact component={Till} />\n            <Route path=\"/floor\" exact component={Floor} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchOrders: (payload) => dispatch(fetchOrders(payload)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import {\n  FETCH_ORDERS,\n  ADD_ORDER,\n  CLOSE_ORDER,\n  REMOVE_ORDER,\n  PAY_ORDER,\n  ADD_ITEM,\n  REMOVE_ITEM,\n  INCREMENT_ITEM,\n  DECREMENT_ITEM,\n  DISHES_PREPARING_ORDER,\n  DISHES_READY_ORDER,\n  DISH_DELIVERED,\n  DISH_READY,\n  DISH_PREPARING,\n} from \"../actions/orderAction\";\n\n// Estado inicial\nconst initialState = { orders: [] };\n\nexport function order(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_ORDERS:\n      return {\n        orders: action.payload,\n      };\n\n    case ADD_ORDER:\n      return {\n        orders: [action.payload, ...state.orders],\n      };\n\n    case CLOSE_ORDER:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload) {\n              order.closed = !order.closed;\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case REMOVE_ORDER:\n      return {\n        orders: [\n          ...state.orders.filter((order) => order._id !== action.payload),\n        ],\n      };\n\n    case PAY_ORDER:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload) {\n              order.paid = !order.paid;\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case ADD_ITEM:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              delete action.payload.order_id;\n              if (order.dishes === undefined) order.dishes = [];\n              order.dishes = [action.payload, ...order.dishes];\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case REMOVE_ITEM:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes = order.dishes.filter(\n                (dish) => dish._id !== action.payload._id\n              );\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case INCREMENT_ITEM:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes.forEach((item) => {\n                if (item._id === action.payload._id) {\n                  item.count += 1;\n                }\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DECREMENT_ITEM:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes.forEach((item) => {\n                if (item._id === action.payload._id) {\n                  item.count -= 1;\n                }\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DISHES_READY_ORDER:\n      console.log(action.payload.dishes);\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              action.payload.dishes.forEach((ele) => {\n                order.dishes.forEach((item) => {\n                  if (item._id === ele) {\n                    item.state = \"ready\";\n                  }\n                });\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DISHES_PREPARING_ORDER:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              action.payload.dishes.forEach((ele) => {\n                order.dishes.forEach((item) => {\n                  if (item._id === ele) {\n                    item.state = \"preparing\";\n                  }\n                });\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DISH_DELIVERED:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes.forEach((item) => {\n                if (item._id === action.payload.dish_id) {\n                  item.state = \"delivered\";\n                }\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DISH_READY:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes.forEach((item) => {\n                if (item._id === action.payload.dish_id) {\n                  item.state = \"ready\";\n                }\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    case DISH_PREPARING:\n      return {\n        orders: [\n          ...state.orders.map((order) => {\n            if (order._id === action.payload.order_id) {\n              order.dishes.forEach((item) => {\n                if (item._id === action.payload.dish_id) {\n                  item.state = \"preparing\";\n                }\n              });\n            }\n            return order;\n          }),\n        ],\n      };\n\n    default:\n      return state;\n  }\n}\n","import {\n  FETCH_TABLES,\n  MODIFY_TABLE,\n  RESET_TABLE,\n} from \"../actions/tableAction\";\n\n// Estado inicial\nconst initialState = { tables: [] };\n\nexport function table(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_TABLES:\n      return {\n        tables: action.payload,\n      };\n\n    case MODIFY_TABLE:\n      return {\n        tables: [\n          ...state.tables.map((table) => {\n            if (table.number === action.payload.number) {\n              table.free = !table.free;\n              table.order = action.payload.order_id_param;\n            }\n            return table;\n          }),\n        ],\n      };\n\n    case RESET_TABLE:\n      return {\n        tables: [\n          ...state.tables.map((table) => {\n            if (table.number === action.payload) {\n              table.free = !table.free;\n              delete table.order;\n            }\n            return table;\n          }),\n        ],\n      };\n\n    default:\n      return state;\n  }\n}\n","/*  Para crear el store siempre se hace a través \n    de reducers, nunca a través de acciones. */\nimport { combineReducers } from \"redux\";\nimport { order } from \"./orderReducer\";\nimport { table } from \"./tableReducers\";\n\n// aca se iran añadiendo todos los reducers\nexport default combineReducers({\n  order,\n  table,\n});\n","import { createStore } from \"redux\";\n/*  lo nombro rootReducers al combineReducers\n    que exporto desde reducers/index.js */\n// import rootReducers from \"./reducers\";\nimport rootReducers from \"./reducers\";\n\nconst store = createStore(rootReducers);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\n// Instanciamos el cliente de Apollo\nconst client = new ApolloClient({\n  uri: \"http://13de335f-c6f0-4042-aa08-38e3c58a078b.clouding.host:3600/\",\n  // uri: \"http://localhost:3600/\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","export const FETCH_ORDERS = \"FETCH_ORDERS\";\nexport const ADD_ORDER = \"ADD_ORDER\";\nexport const CLOSE_ORDER = \"CLOSE_ORDER\";\nexport const REMOVE_ORDER = \"REMOVE_ORDER\";\nexport const PAY_ORDER = \"PAY_ORDER\";\nexport const ADD_ITEM = \"ADD_ITEM\";\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\nexport const INCREMENT_ITEM = \"INCREMENT_ITEM\";\nexport const DECREMENT_ITEM = \"DECREMENT_ITEM\";\nexport const DISHES_PREPARING_ORDER = \"DISHES_PREPARING_ORDER\";\nexport const DISHES_READY_ORDER = \"DISHES_READY_ORDER\";\nexport const DISH_DELIVERED = \"DISH_DELIVERED\";\nexport const DISH_READY = \"DISH_READY\";\nexport const DISH_PREPARING = \"DISH_PREPARING\";\n\n// Consume desde la API las comandas\nexport const fetchOrders = (orders) => {\n  return {\n    type: FETCH_ORDERS,\n    payload: orders,\n  };\n};\n\n// Agrega una comanda al store\nexport const addOrder = (payload) => {\n  return {\n    type: ADD_ORDER,\n    payload,\n  };\n};\n\n// Cierra una comanda\nexport const billOrder = (payload) => {\n  return {\n    type: CLOSE_ORDER,\n    payload,\n  };\n};\n\n// Elimina una comanda\nexport const removeOrder = (order_id) => {\n  return {\n    type: REMOVE_ORDER,\n    payload: order_id,\n  };\n};\n\n// Agrega un item a una comanda\nexport const addItem = (item) => {\n  return {\n    type: ADD_ITEM,\n    payload: item,\n  };\n};\n\n// Elimina un item a una comanda\nexport const removeItem = (item) => {\n  return {\n    type: REMOVE_ITEM,\n    payload: item,\n  };\n};\n\n// Incrementa un item en una comanda\nexport const incrementItem = (item) => {\n  return {\n    type: INCREMENT_ITEM,\n    payload: item,\n  };\n};\n\n// Decrementa un item en una comanda\nexport const decrementItem = (item) => {\n  return {\n    type: DECREMENT_ITEM,\n    payload: item,\n  };\n};\n\n// Cambia el estado de los platos que se envian a cocina\nexport const dishesPreparingToOrder = (payload) => {\n  return {\n    type: DISHES_PREPARING_ORDER,\n    payload,\n  };\n};\n\n// Cambia el estado de los platos que estan listos\nexport const dishesReadyToOrder = (payload) => {\n  return {\n    type: DISHES_READY_ORDER,\n    payload,\n  };\n};\n\n// Cambia el estado de un item entregado\nexport const changeDishDelivered = (payload) => {\n  return {\n    type: DISH_DELIVERED,\n    payload,\n  };\n};\n\n// Cambia el estado de un item que esta listo\nexport const changeDishReady = (payload) => {\n  return {\n    type: DISH_READY,\n    payload,\n  };\n};\n\n// Cambia el estado de un item que esta en preparación\nexport const changeDishPreaping = (payload) => {\n  return {\n    type: DISH_PREPARING,\n    payload,\n  };\n};\n\n// Cambia el estado de una comanda a pagada en true\nexport const pay = (payload) => {\n  return {\n    type: PAY_ORDER,\n    payload,\n  };\n};\n","export const FETCH_TABLES = \"FETCH_TABLES\";\nexport const MODIFY_TABLE = \"MODIFY_TABLE\";\nexport const RESET_TABLE = \"RESET_TABLE\";\n\n// Consume desde la API las mesas exitentes\nexport const fetchTables = (tables) => {\n  return {\n    type: FETCH_TABLES,\n    payload: tables,\n  };\n};\n\n// Cambia el estado de disponibilidad a ocupado\nexport const modifyTable = (payload) => {\n  return {\n    type: MODIFY_TABLE,\n    payload,\n  };\n};\n\n// Cambia el estado de disponibilidad a libre\nexport const resetTable = (number) => {\n  return {\n    type: RESET_TABLE,\n    payload: number,\n  };\n};\n","import { gql } from \"apollo-boost\";\n\n/*\n  Esta Query trae los platos desde la API GraphQL\n*/\nexport const GET_DISHES = gql`\n  {\n    dishes {\n      _id\n      name\n      price\n      category\n    }\n  }\n`;\n\n/*\n  Esta Query trae las comandas desde la API GraphQL\n*/\nexport const GET_ORDERS = gql`\n  {\n    orders {\n      _id\n      number\n      date\n      time\n      table\n      closed\n      paid\n      dishes {\n        _id\n        name\n        price\n        category\n        count\n        state\n      }\n    }\n  }\n`;\n\n/*\n  Esta Query trae las mesas desde la API GraphQL\n*/\nexport const GET_TABLES = gql`\n  {\n    tables {\n      number\n      color\n      free\n      order\n    }\n  }\n`;\n"],"sourceRoot":""}